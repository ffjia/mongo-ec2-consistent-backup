#!/usr/bin/env ruby
# Lock a set of disk via the mongo lock command and snapshot them to the cloud

require 'rubygems'
ENV['BUNDLE_GEMFILE'] =  File.join(File.dirname(__FILE__), "..", "Gemfile")
require 'bundler/setup'
require 'trollop'

$: << File.join("..", File.dirname(__FILE__), "lib")
require 'ec2-consistent-backup'
require 'ec2_volume_snapshoter'

opts = Trollop::options do
  opt :access_key_id, "Access Key Id for AWS", :type => :string, :required => true
  opt :secret_access_key, "Secret Access Key for AWS", :type => :string, :required => true
  opt :region, "Target region with instances", :type => :string, :required => true
  opt :instance_id, "Instance identifier", :type => :string
  opt :hostname, "Hostname to look for", :default => "localhost"
  opt :port, "Mongo port to connect to", :default => 27017
  opt :user, "Mongo user for authentication", :type => :string, :required => true
  opt :password, "Mongo password for authentication", :type => :string, :required => true
  opt :devices, "Devices to snapshot, comma separated", :type => :string, :required => true
  opt :prefix, "Snapshot name prefix", :type => :string, :required => true
  opt :type, "Snapshot type, to choose among #{EC2VolumeSnapshoter::KINDS.keys.join(",")}", :default => "snapshot"
  opt :limit, "Cleanup old snapshots to keep only limit snapshots", :type => :integer
end

# Lock Mongo
# Snapshot
# Unlock

aki = opts[:access_key_id]
sak = opts[:secret_access_key]
region = opts[:region]
instance_id = opts[:instance_id]
prefix = opts[:prefix]

locker = MongoHelper::DataLocker.new(opts[:hostname], opts[:port], opts[:user], opts[:password])
locker.lock

begin
  snapshoter = EC2VolumeSnapshoter.new(aki, sak, region, instance_id, prefix)
  limit = if opts[:limit] == nil
    EC2VolumeSnapshoter::KINDS[opts[:type]]
  else
    opts[:limit]
  end

  snapshoter.snapshot_devices(opts[:devices].split(/,/), prefix, limit)
rescue Exception => e
  require "pp"
  puts e.inspect
  pp e.backtrace
ensure
  locker.unlock
end
